$(function() {
  consoleInit(main)
});

const Address = [
  '0xb3B7414CFD0C31747e982B5104325A57025eC78A',
  "0x15c74Dae3afd158C24759FddA8a27e644C9368eF",
  "0x7E534F582C79e5c1368185bed8faBB0343E127Ef",
  //"0xb9977F7a1780feFFc0388bC5EB0C7661cd8e5185",
  "0x4f0fbA90E25995291E2e848dC1a556B3F59D83cF",
  "0x4dcEA1238Ac823Bb3018A96fC374C360A23e29cc",
  "0xfcbC7dF02448b6CE83498AEC2162Da95d105A026",
  "0x6DBF865f19cd0AACA9550bdDD3b92f4f4E239468",
  "0x75912BF4454e7f7EA21B83BD1313974b69d8C63a",
  "0x69d8EbE4A431D51ef6720b7e4aEd213615d2e614",
  "0x9CFe241015D21c3D8290a1b59205E5d0c2F7f421",
  "0x56E2492A926E419C6711e257b6be5E4491220b92",
  "0x0B3f8eFa73B40AB006b99867D9abFc76dCf699C4",
  "0x459f0Df3D59554dcd82A26C0373789D7ED3e0C53",
  "0xF7A0D4E27F1A7663A10851710f0285afEf3467F7",
  "0x1498d43FC704DEC72fD86B5f535Da65603aA466A",
  "0x28Cd1849acbE189805BBc06f2E192b81189cE3E5",
  "0x23824a5df28fdB675299fa6B34A96E6CDAE6EB2E",
  "0x07f11f5903Af3Bb24E27Af0f794Ef120726E76BB",
  "0xbF5bFFbf7D94D3B29aBE6eb20089b8a9E3D229f7",
  "0x46CE405ee945B2D2cC494c62105D8284fb04B8Ba",
  "0x6DA2Cd9D221a79769A72D78525437bb78602c57f",
  "0x048db6C50fFd46DF3bBD8332BB65c062F8D961a8",
  "0xDdddDfEb2dB092a84f27893a040b2BfedE8BE074",
  "0xAcA969fb39FF5d572a219838411F218DE96615Fb",
  "0x23576f938a7923E3f4e419831b35489Adb0494e4",
  "0x92984CE5878Ce56f65218cBC1957c99b2573Ec3B",
  "0x51132860F3c6947aeb3cB8139121F4D5Ff6AA6d4",
  "0xE40Dd09cBe02419d2Be363f55200c72bcA617404",
  "0xAB4f4a38bc4F74116259174835f67035e973B885",
  "0xDd1C67481A12C8314aA834D6c96A6530ccfb9dA9",
  "0x19D579dfA6a41C9215f1a55B810D59F254F6A8fC",
  "0xFf40Eb068d35bB24f1e43CDB38fd342e2aA58af7",
  "0x32e4F703d6eB770f4e1fD8AbC4daE35f1a420291",
  "0x5f02327Fc088f8Db5fa8F5A9992Aebdc33450d1F",
  "0xf8571832675F27a26E7d152394fC07246Bd33b91",
  "0xbb0841e1b782E001aF08cDD5097A7a09162B9ec6",
  "0xe84BC4114f38D7259D04cE53DF8aaA784dd6680d",
  "0x0f12DC66F750d95fe7612dC757D7f352521bB61D",
  "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
  "0x19d6C1acd4DdA69b54BBe5dA8c45D8261A0E47FB",
  "0x11303d1552C95f96CaD65A3c0797f20d043e1AB5",
  "0xE8917E088FFaF180b061f6EAAc061bcf20f0Ab70",
  "0x87099fDE786144b554Af66Fb8cbE3130c8cb6470",
  "0x1933133cFab7Fd8908E776e63095aC58c0fAEaE3",
  "0xb9D554fee84Fa97fEee3525a162602860aE554c5",
  "0x211654525dC64A7f74F6361D6F3Dc0710108ae43",
  "0x9EE89F3a3Dfd596bb6F53696E2ed1D09C738f8c8",
  "0x1B53500677cB1B042b12081a8661a6f08781D58c",
  "0x142b4e2c9234aFC3dC07e12d24493a4Ef26c537C",
  "0x3ca2cfd8E17C40ac6F4Aa6c1A4b1723F0Bf59dD8",
  "0xb940DA8b71791c1F42cc612d1af427878ec1A369",
  "0xFbDc6e63CF250E2843ffAef75717993b3D7CA89E",
  "0x150f6526De9b55E126870A118D47DC4Fd0F8Ac48",
  "0x4d94796EEe7694E5c60cd850eF47D9E536D3Ad8b",
  "0xCFD132761c41f66A188A478a282121b0Fb6d99bF",
  "0x3E63F20Cdd82A9Fec2Bbe48ca820589AFCb85194",
  "0x0280988155EdB58210Fe30be5d429C0f1B91BcE6",
  "0xD3F113CFC44A5E28a6683A2D0424d3ea6CCc2aC0",
  "0x68E7DD061b068eA476E979215e3C08a235BD0CeE",
  "0x38056B8AD79256cECf7a2Ab6103A9c00AbE61214",
  "0x14d35e27D1381C73AA748f39eCa82c6E6f759392",
  "0x4647247005A15594D16a226867812F509C4557ED",
  //"0x8B414448de8B609e96bd63Dcf2A8aDbd5ddf7fdd",
  "0x67F8190A37aA1F3516713F849bdF3B7b9E3dF3a0",
  "0xa13ADB03619835E6e59ED0eD440bE765017D8715",
  "0x8a39f38b783857fd128A8bC3354f981160D750A7",
  "0xB6Bf27B1b3E0ce30A91533F2Fc251aFbda53E187",
  "0xFB503e8CC1657aDEb1A7ed40A0D7aE77ECeCaAfd",
  "0x7873238A924C6f00bE150b8CfDc3C233a8D5758B",
  "0x73d835325637FAF11Ae1838428510D9566E1a465",
  "0x942B94A79fBe8Ae12594ee4510619B5209D4a6D4",
  "0x2eC16d231f4001153dD84Da477455D0BcB7d5c71",
  "0x1fEb96Ef9B166859280B6992d4d6c4cdC5b694f6",
  "0x816D5441C47d6d8fa62b28b6CB32aE7e72fB0E7a",
  "0x81514F9533753137E9F8842fe4BDefFFa3E3Dced",
  "0x316AD32f61eb06d537D1b545C5d4c5c2168Baf6a",
  "0x99D6aCaCA55ffcA5fE47755D17865d394E59c891",
  "0x8DbDD4A46ABE939a98b5876702bFF56EA4Cd33Ad",
  "0xb7e864cB98896b8E348d31Bda03C3524dc709041",
  "0x7d2dA0917500AFb3df94a09e24a34790A386B208",
  "0x3129FB69d734AeBeeeF7E40D33b5093f4284767c",
  "0x7257F259c17226C5B09048308403757a6680f2C1",
  "0xA1801f4FFD40b192A13A54614E66d3625d5C422e",
  "0x481480FCEECA146743D75bFDa581946efBc74261",
  "0xc8410344FDa4F4A348492a19b099B389494ED668",
  "0x755c78D3bC25e297e8E010A2D1FCf49Cc43ADa21",
  "0x5bD57DFC6Bc4FC322da4a4A4dA9a0a05482644C2",
  "0x4084F32A91F4D8636Ca08386EFE70c6E302F1d84",
  "0x698bceeE246934FbFFDbe222CC4444Ae7585C3cb",
  "0x8dc3cf91D0118121b5F152556E8E33804c1Ae1CD",
  "0x7D2d076000611E44740d636843384412399e31b9",
  "0x9669Fe1ea0d8883661289461b90a10B71Ae400Ee",
  "0x5adcc735654Bfa472e8c47a639b08292913eD773",
  "0x8E2DCd0F79C024c02A8d88A9c8C366E64bD8feA9",
  "0xC6eBfB1199fCa2841ac8A30c5Ac2D28Ced2ee204",
  "0x8FFeAc711b0F7dff69228eb40f33034b5fB822A2",
  "0x622bE93c63Fa148EC78fdb508Ac1AF1BA8BC0Dd4",
  "0x4934D7C4F22829432BE73bB29E7882B39F5E5C31",
  "0x87Cb748dCc4E22c0e6928b0BE738d958FEe4F304",
  "0x9d2935dcb0225cD79169cB71F45157cfFC6cDD42",
  "0xecd3C537399D9DC65786a5ACcce94e48BD4988fF",
  "0x6296043F1cE18a94eE61A9d6dA99281197d73a00",
  "0x07d392a242a4E62919C316fF8EEe210e4034ed20",
  "0x5Be841f804Be8f9825c85e728f9b7c8EE55da507",
  "0x54ee73D619D332E360bB3895Ee1647E18dCD21F7",
  "0x972CCEF781feB87450D52d929685B162E9d305C4",
  "0x16aeb10777f1315fc28084fe35a45F377c161cD3",
  "0xCb3257195A3Cec8f97d2375B7AA4939ce3e125E9",
  "0x90148b6A79253c67131DdDf58EcB39B11663E40c",
  "0x3b2464afCDCCAca302357736df4B1d552e239fee",
  "0x1227a55a86ACa0331e450BA6A3750054Da35347D",
  "0xdD65Bb46A7C4a9ccB8d3Dd7caA40D75e0622e445",
  "0xF3B07e79E1F18315006642E9E5c1484d2C97A9E4",
  "0x45AF056a757D6649c24D74c2E4fE449682F6A2dB",
  "0x0C4684086914D5B1525bf16c62a0FF8010AB991A",
  "0xC5D0efF84fF61A8A6b6CcF6852506AFb51fe803F",
  "0x3683B47E3FE0A37e624Fb82D60D593042b1920f1",
  "0x59280E53ac2202563Ad3Dd6FfdC5Ee954C540501",
  "0x093Dcad3a5257457746de4c614F983b23B982602",
  "0xF3072d053EAcFAB3adcA9edde5913610566D82D6",
  "0xE8326E606793bf60a7A9Ee13AAEe1C06b3D4e491",
  "0x0e3AAE51740325E41351103Ad4A0594900100b43",
  "0xF32309A6C21C1C27b0a6b87E607B9862d67Be21f",
  "0x468EBa06c845205Fb79098EF3b95c0b319DC0541",
  "0x2D5c943ee961b7DC605CA192a19Fd0Fe9258aC5F",
  "0x6d0B40B7b1e5f68132E7faD3a4A6Bc06F165f560",
  "0x1154831d66afe2e825c0B400A0780B9756CC3240",
  "0xA4d9aE5F2338e561182F030751654c2F4c00DE8F",
  "0xf6A7B70641bC02eBE9e57F347AC8Aa7197872e94",
  "0x08337a1549166dCc463279B68f0028b2f0515B0B",
  "0x7867C7a94eF30E26ae855af5d271fB9E52f26c36",
  "0x9B3365CF1927c29Fa6C1d9bbD214A6bf7b893a06",
  "0x92752C1d6912A12cd9Cf71093b8812c29E8Ef7F4",
  "0xCA400EbC7632A1a9346851A72Fd41A7Ef234077C",
  "0xeD8c2af5c9F7A0fa5AAa0D8F8E78DDCa28eef3D6",
  "0x85D6F430f30B24F5e933cB3F5E52487dEF8F4e75",
  "0x77c26728465277510c4E33820a4D3b686F44Ab7E",
  "0xB5B9CE35E6b3d5f8C800F19be5d8a76D9901f6B5",
  "0xD3D10b328c6cEe9FD599B11ea1272Fe829409bba",
  "0xB18BfB17859C6B90dC0E374fe763A8AfCe25d80c",
  "0x58887009A412Ad52a4FB746D0846585346d83BC0",
  "0x8C3C86bEA8eD5ACbCE4944deF6731291Eb193C26",
  "0xf487044eD85F2d47A8eAD6b86c834976B8c31736",
  "0x562ACEA3c03dBDDc25e2F24bb2685D17Bdb4e62f",
  "0xFC47515433eE291E692958a2D15F99896FAFC0BC",
  "0x39F7fCB3aF11B0a274514C581d468739e75f64EC",
  "0xb667121B4D4b6ea5DE4bb61bd3a02E53529BfcCA",
  "0xFD1F86448b56942C32B954092F2fDBCE91E37Bf6",
  "0x8Bf6402AfcfE11519947829Af44770Fa44A01949",
  "0xBD9f16EeE869808bF22823427D1f4a1E7A440E8D",
  "0x8F871D05d7AfB9dAffA5Df13A91c74e870e6c31E",
  "0x165FA1023429E266Cd767845E8dE419Ce3abd379",
  "0x90E24A2dfd80F02D01c7B630E8e3199C8A0388D3",
  "0xfAeD69427E2444263b4C62c630a872A289a54865",
  "0xbd8B2bC5CaAb6843365084b529905964d0626248",
  "0x1fc1f7A0943c589EDFf4A3650E40C0821B41901d",
  "0xc0c50aB019d256Ec32023aFdca6868C022977da2",
  "0x1f257A6E8e4873cc32ae4E69d8436Fe70C663fb7",
  "0x779A387e67aF939A6E8E9cF664f69590763f9b06",
  "0x5Da33bCD38FbC3e9632F9F6a198F4f0eF13746b6",
  "0xb74dE62EEf4EBb0d02e60BAf280F3C58080ec3C4",
  "0x6094637C7A1B98Ee136fA1AaFaBd59E7b0B514be",
  "0x7346502437C9F09AB040855f756EdeA2A2aC0912",
  "0x2eE33e53eBD75222c7c62F1e9FEB0bc9766136ba",
  "0xf752325D33f748115660B8661ab7DE10cfd1997C",
  "0x069E889D729D4D96Dae10C86a4D1F629ad81adEf",
  "0xFfbE3f2b1fF3f595e3059CCa8a7FcD3eB4D71949",
  "0x104a9f8C3a1f3bF0814105E1fD457CD7775979cE",
  "0x7A43D565837274eA2f6E6d95F4020871669C13C9",
  "0xF947758148e056Cd8096eFD07f536B59f3247206",
  "0x81dBdb246Fa1bB98a85C59eAF9face97403b6C19",
  "0xfE0521F000d20f0bb9bB2cBa51dC9066468671f9",
  "0x7f3BB8dB336ff50120E290e5C8eC78B20f619D01",
  "0xfd410034f88B99E4BeE8Bd7B51Fa323B6678Bf73",
  "0xC9cD088fD5C17d5cbFd1ff331fa6A48F2f5D9Cb1",
  "0x0cAAA919FEeb50029f99b288e43a73c66178C976",
  "0x9968f0c68B9D812C226F3d6eb3cd3c958979E1af",
  "0x7832928758afD045cE857aFe5b6320466b5c05ed",
  "0xb34fE8A87DFEbD5Ab0a03DB73F2d49b903E63DB6",
  "0xE285a5Cb85297a10fB65EB8FEdbf3900eC242dB8",
  "0xfdd8B1444B3A929979d84E2255Ab52cb9F7B5a4C",
  "0xDf98Af02258E7F32A4fEb77c159A42Bd64D204d3",
  "0xB42cD0bea11ad9eC610F2bd5826463Bb93396538",
  "0xF0c2d1D6A3D7Fb3d1Ddc2468fCF1d3B1AB648DaC",
  "0x43C1d15C34D73eb6dFD2bf39BC53C0a0b5724b17",
  "0x579cF87201C82B21ba9ae29678B812E07fccf14C",
  "0xe97e85a8cc54980e0370faA196DAE25E43b2aef0",
  "0x976EEea238514fd13A4aB3E4cB45EfA17F9426A7",
  "0x8D325d788140c391Fcb55A45E19bB4c66Ef87529",
  "0xbD42169E094CD8b95513cB3640e9D37418258E17",
  "0x6b128f920813dF43Ac91D83ed8A79b08C99a41db",
  "0xc474e6cAE8b7c7E43b3c69125A7226A4A08a4229",
  "0xbFBbEB1Bde34C53533A38cFBb07c37fFA06502a5",
  "0x2cFB60bD96B5215437c3e9D2cAB218fcE29F096C",
  "0x3b23E8a535B2a9e4C73f617c1c5A36299b3C57B2",
  "0x9550593eA20359A4EfeB914C1FFf2d123EC9C091",
  "0x6eDA40218604b9aBE4DC40d68a23A86f1F50B66C",
  "0x06404FC9C69F8333DC24D4C856E2c8Db7983EB8a",
  "0xA544b965C2a05b97C44f3126cec916332aFb3175",
  "0x2521597A67DbA56932358F0a67f196BA0cD33053",
  "0x206D15CB7DA413C0E662f284e00f907f51999a40",
  "0x0bc2Fb2d9Ba486cBF9e6192f982023f72E80f96F",
  "0xe51d794d7822e5A78bA681A69294a31BF2117b94",
  "0xb373a54f7F773a99feBe49F2C5dB11756574f0CE",
  "0xfDffdf6Dc4FB30BeDE8af0f78D42c5468F37324B",
  "0x4DD36b27e038E5c479d8BEC440c8f4eE89B6dF5D",
  "0x89a806347b0814a265Dc17aFc343866b2214dD0F",
  "0x212dF67Bf1243eE57686883C9222637136bb65E4",
  "0xa019F49464FCD206d080060CBbCB1A089441a732",
  "0xec2258cC4B75aD0a013C7346c07f7470AEa7F0e4",
  "0xC82ad2Eab7EE0B9226aE884255ca9c1cB33D9E2C",
  "0x1Ad3bE171A6be9f6b9a60C30c5373185bD9c0B6e",
  "0x37A83906a69d6236DBcB4d8257D8f62d1f3BBcD5",
  "0x4a79206B5e1aF8ff4e62183f2f2ff2B4Efb0A9B9",
  "0x43801E030AFbdFD9A30dA3E5321DD6B609083BCB",
  "0xeec2d8bD006e189A0e53819C670b9c08Ee098EB0",
  "0xA75AF2E0ea2BBDa6Dc6921B4Ee3bb051309d28C9",
  "0x20afdEf84D1E87D9BfD8086F7269183E12C712E2",
  "0x0345f2b85d238a963965Ef8163ccB93efF81Ff5E",
  "0xC53DC280dc14F24B21370919d757cF7b296BFd31"
]

async function main() {
  const App = await init_ethers();

  _print(`Initialized ${App.YOUR_ADDRESS}\n`);
  _print("Reading smart contracts...\n");

  const prices = await getAvaxPrices();
  const tokens = {};
  const poolInfos = await Promise.all(Address.map(a => loadYieldyakPoolInfo(App, tokens, prices, a)));
  let tvl = 0, userTvl = 0
  for(const p of poolInfos.filter(p => p))
  {
    printYieldyakContract(p);
    if (!isNaN(p.underlyingDepositTokensUSD)) tvl += p.underlyingDepositTokensUSD;
    if (!isNaN(p.userStaked * p.poolPrices.price)) userTvl += p.userStaked * p.poolPrices.price;
  }
  //_print_bold(`\nTotal Value Locked: $${formatMoney(tvl)}`);
  if (userTvl > 0) {
    _print_bold(`You are staking a total of $${formatMoney(userTvl)}`);
  }

  hideLoading();
}

async function loadYieldyakPoolInfo(App, tokens, prices, contractAddress) {
  try {
    const contract = await new ethers.Contract(contractAddress, ARBIS_VAULT_UNDERLYING_ABI, App.provider);
    const vault = await getAvaxToken(App, contractAddress, App.YOUR_ADDRESS);
    var newTokenAddresses = vault.tokens.filter(x => !getParameterCaseInsensitive(tokens, x));
    for (const address of newTokenAddresses) {
      tokens[address] = await getAvaxToken(App, address, contractAddress);
    }
    const totalSupply = await contract.totalSupply() / 1e18;
    const totalDeposits = await contract.totalDeposits() / 1e18;
    const ppfs = totalDeposits / totalSupply;
    const userStaked = await contract.balanceOf(App.YOUR_ADDRESS) / 1e18;
    const poolPrices = getPoolPrices(tokens, prices, vault, "avax");
    const underlyingDepositTokensUSD = totalDeposits * poolPrices.price;
    return { vault, poolPrices, userStaked, ppfs, totalSupply, totalDeposits, underlyingDepositTokensUSD }
  }
  catch (err) {
    const contract = await new ethers.Contract(contractAddress, ARBIS_VAULT_UNDERLYING_ABI2, App.provider);
    const vault = await getAvaxToken(App, contractAddress, App.YOUR_ADDRESS);
    var newTokenAddresses = vault.tokens.filter(x => !getParameterCaseInsensitive(tokens, x));
    for (const address of newTokenAddresses) {
      tokens[address] = await getAvaxToken(App, address, contractAddress);
    }
    const totalSupply = await contract.totalSupply() / 1e18;
    const totalDeposits = await contract.totalDeposits() / 1e18;
    const ppfs = totalDeposits / totalSupply;
    const userStaked = await contract.balanceOf(App.YOUR_ADDRESS) / 1e18;
    const poolPrices = getPoolPrices(tokens, prices, vault, "avax");
    const underlyingDepositTokensUSD = totalDeposits * poolPrices.price;
    return { vault, poolPrices, userStaked, ppfs, totalSupply, totalDeposits, underlyingDepositTokensUSD }
  }
}

async function printYieldyakContract(poolInfo) {
  const poolPrices = poolInfo.poolPrices;
  _print(`${poolPrices.name} Price: $${formatMoney(poolPrices.price)} TVL: $${formatMoney(poolPrices.tvl)}`);
  var userStakedUsd = poolInfo.userStaked * poolPrices.price;
  var userStakedPct = userStakedUsd / poolPrices.tvl * 100;
  let underlyingDepositTokensUSD = poolInfo.totalDeposits * poolPrices.price;
  _print(`Total Staked: ${poolInfo.totalSupply.toFixed(4)} ${poolInfo.vault.name} (${poolInfo.totalDeposits.toFixed(4)} ${poolPrices.name}), $${formatMoney(underlyingDepositTokensUSD)}`);
  _print(`You are staking ${poolInfo.userStaked.toFixed(4)} ${poolPrices.name} ($${formatMoney(userStakedUsd)}), ${userStakedPct.toFixed(2)}% of the pool.`);
  if (poolInfo.userStaked > 0) {
    _print(`Your stake comprises of ${poolInfo.userStaked * poolInfo.ppfs} ${poolInfo.vault.token.symbol}.`)
  }
  _print("");
}